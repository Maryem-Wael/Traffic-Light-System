
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000001e0  00000254  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000844  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000680  00000000  00000000  00000b80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032b  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c4  00000000  00000000  0000152c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039e  00000000  00000000  000015f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000020d  00000000  00000000  0000198e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include <string.h>
#include "uart.h"

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	6e 97       	sbiw	r28, 0x1e	; 30
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	uint8 Str[30];
	uint8 *head;
	uint8 *data;

	/* Initialize the UART driver with Baud-rate = 9600 bits/sec */
	UART_init(9600);
  96:	60 e8       	ldi	r22, 0x80	; 128
  98:	75 e2       	ldi	r23, 0x25	; 37
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	0e 94 6d 00 	call	0xda	; 0xda <UART_init>

	while(1)
	{
		//data = UART_recieveByte(); /* Receive Byte from Terminal1 */
		//UART_sendByte(data);       /* Re-send the received byte to Terminal2 */
		head=UART_receiveString(Str);     /* Receive String from Terminal */
  a2:	ce 01       	movw	r24, r28
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receiveString>
		data=UART_receiveString(Str);
  aa:	ce 01       	movw	r24, r28
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receiveString>
  b2:	fc 01       	movw	r30, r24
		
		if(data[12] == (uint8)'0' && (data[13] == (uint8)'2')  || (data[13] == (uint8)'3'))
  b4:	84 85       	ldd	r24, Z+12	; 0x0c
  b6:	80 33       	cpi	r24, 0x30	; 48
  b8:	19 f4       	brne	.+6      	; 0xc0 <main+0x3e>
  ba:	85 85       	ldd	r24, Z+13	; 0x0d
  bc:	82 33       	cpi	r24, 0x32	; 50
  be:	19 f0       	breq	.+6      	; 0xc6 <main+0x44>
  c0:	85 85       	ldd	r24, Z+13	; 0x0d
  c2:	83 33       	cpi	r24, 0x33	; 51
  c4:	29 f4       	brne	.+10     	; 0xd0 <main+0x4e>
		{
			UART_sendString("Emergency!\r");
  c6:	80 e6       	ldi	r24, 0x60	; 96
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 96 00 	call	0x12c	; 0x12c <UART_sendString>
  ce:	e9 cf       	rjmp	.-46     	; 0xa2 <main+0x20>
		}
		else
		{
			UART_sendString("No Emergency\r");
  d0:	8c e6       	ldi	r24, 0x6C	; 108
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 96 00 	call	0x12c	; 0x12c <UART_sendString>
  d8:	e4 cf       	rjmp	.-56     	; 0xa2 <main+0x20>

000000da <UART_init>:
void UART_init(uint32 baud_rate)
{
	uint16 ubrr_value = 0;

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
  da:	22 e0       	ldi	r18, 0x02	; 2
  dc:	2b b9       	out	0x0b, r18	; 11
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
  de:	28 e1       	ldi	r18, 0x18	; 24
  e0:	2a b9       	out	0x0a, r18	; 10
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
  e2:	26 e8       	ldi	r18, 0x86	; 134
  e4:	20 bd       	out	0x20, r18	; 32
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
  e6:	dc 01       	movw	r26, r24
  e8:	cb 01       	movw	r24, r22
  ea:	88 0f       	add	r24, r24
  ec:	99 1f       	adc	r25, r25
  ee:	aa 1f       	adc	r26, r26
  f0:	bb 1f       	adc	r27, r27
  f2:	88 0f       	add	r24, r24
  f4:	99 1f       	adc	r25, r25
  f6:	aa 1f       	adc	r26, r26
  f8:	bb 1f       	adc	r27, r27
  fa:	9c 01       	movw	r18, r24
  fc:	ad 01       	movw	r20, r26
  fe:	22 0f       	add	r18, r18
 100:	33 1f       	adc	r19, r19
 102:	44 1f       	adc	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	60 e4       	ldi	r22, 0x40	; 64
 108:	72 e4       	ldi	r23, 0x42	; 66
 10a:	8f e0       	ldi	r24, 0x0F	; 15
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 cc 00 	call	0x198	; 0x198 <__udivmodsi4>
 112:	21 50       	subi	r18, 0x01	; 1
 114:	31 09       	sbc	r19, r1

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
 116:	30 bd       	out	0x20, r19	; 32
	UBRRL = ubrr_value;
 118:	29 b9       	out	0x09, r18	; 9
 11a:	08 95       	ret

0000011c <UART_sendByte>:
{
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
 11c:	5d 9b       	sbis	0x0b, 5	; 11
 11e:	fe cf       	rjmp	.-4      	; 0x11c <UART_sendByte>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
 120:	8c b9       	out	0x0c, r24	; 12
 122:	08 95       	ret

00000124 <UART_recieveByte>:
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
 124:	5f 9b       	sbis	0x0b, 7	; 11
 126:	fe cf       	rjmp	.-4      	; 0x124 <UART_recieveByte>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
 128:	8c b1       	in	r24, 0x0c	; 12
}
 12a:	08 95       	ret

0000012c <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	8c 01       	movw	r16, r24
	uint8 i = 0;
 134:	c0 e0       	ldi	r28, 0x00	; 0

	/* Send the whole string */
	while(Str[i] != '\0')
 136:	03 c0       	rjmp	.+6      	; 0x13e <UART_sendString+0x12>
	{
		UART_sendByte(Str[i]);
 138:	0e 94 8e 00 	call	0x11c	; 0x11c <UART_sendByte>
		i++;
 13c:	cf 5f       	subi	r28, 0xFF	; 255
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
 13e:	f8 01       	movw	r30, r16
 140:	ec 0f       	add	r30, r28
 142:	f1 1d       	adc	r31, r1
 144:	80 81       	ld	r24, Z
 146:	81 11       	cpse	r24, r1
 148:	f7 cf       	rjmp	.-18     	; 0x138 <UART_sendString+0xc>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
 14a:	cf 91       	pop	r28
 14c:	1f 91       	pop	r17
 14e:	0f 91       	pop	r16
 150:	08 95       	ret

00000152 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
uint8 * UART_receiveString(uint8 *Str)
{
 152:	ef 92       	push	r14
 154:	ff 92       	push	r15
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	cf 93       	push	r28
 15c:	8c 01       	movw	r16, r24
	uint8 i = 0;

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
 15e:	0e 94 92 00 	call	0x124	; 0x124 <UART_recieveByte>
 162:	f8 01       	movw	r30, r16
 164:	80 83       	st	Z, r24
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
uint8 * UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
 166:	c0 e0       	ldi	r28, 0x00	; 0

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
 168:	08 c0       	rjmp	.+16     	; 0x17a <UART_receiveString+0x28>
	{
		i++;
 16a:	cf 5f       	subi	r28, 0xFF	; 255
		Str[i] = UART_recieveByte();
 16c:	78 01       	movw	r14, r16
 16e:	ec 0e       	add	r14, r28
 170:	f1 1c       	adc	r15, r1
 172:	0e 94 92 00 	call	0x124	; 0x124 <UART_recieveByte>
 176:	f7 01       	movw	r30, r14
 178:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
 17a:	f8 01       	movw	r30, r16
 17c:	ec 0f       	add	r30, r28
 17e:	f1 1d       	adc	r31, r1
 180:	80 81       	ld	r24, Z
 182:	83 32       	cpi	r24, 0x23	; 35
 184:	91 f7       	brne	.-28     	; 0x16a <UART_receiveString+0x18>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\r';
 186:	8d e0       	ldi	r24, 0x0D	; 13
 188:	80 83       	st	Z, r24
	return Str;
}
 18a:	c8 01       	movw	r24, r16
 18c:	cf 91       	pop	r28
 18e:	1f 91       	pop	r17
 190:	0f 91       	pop	r16
 192:	ff 90       	pop	r15
 194:	ef 90       	pop	r14
 196:	08 95       	ret

00000198 <__udivmodsi4>:
 198:	a1 e2       	ldi	r26, 0x21	; 33
 19a:	1a 2e       	mov	r1, r26
 19c:	aa 1b       	sub	r26, r26
 19e:	bb 1b       	sub	r27, r27
 1a0:	fd 01       	movw	r30, r26
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <__udivmodsi4_ep>

000001a4 <__udivmodsi4_loop>:
 1a4:	aa 1f       	adc	r26, r26
 1a6:	bb 1f       	adc	r27, r27
 1a8:	ee 1f       	adc	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	a2 17       	cp	r26, r18
 1ae:	b3 07       	cpc	r27, r19
 1b0:	e4 07       	cpc	r30, r20
 1b2:	f5 07       	cpc	r31, r21
 1b4:	20 f0       	brcs	.+8      	; 0x1be <__udivmodsi4_ep>
 1b6:	a2 1b       	sub	r26, r18
 1b8:	b3 0b       	sbc	r27, r19
 1ba:	e4 0b       	sbc	r30, r20
 1bc:	f5 0b       	sbc	r31, r21

000001be <__udivmodsi4_ep>:
 1be:	66 1f       	adc	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	88 1f       	adc	r24, r24
 1c4:	99 1f       	adc	r25, r25
 1c6:	1a 94       	dec	r1
 1c8:	69 f7       	brne	.-38     	; 0x1a4 <__udivmodsi4_loop>
 1ca:	60 95       	com	r22
 1cc:	70 95       	com	r23
 1ce:	80 95       	com	r24
 1d0:	90 95       	com	r25
 1d2:	9b 01       	movw	r18, r22
 1d4:	ac 01       	movw	r20, r24
 1d6:	bd 01       	movw	r22, r26
 1d8:	cf 01       	movw	r24, r30
 1da:	08 95       	ret

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
